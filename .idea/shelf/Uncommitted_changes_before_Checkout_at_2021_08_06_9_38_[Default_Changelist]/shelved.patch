Index: app/src/main/java/com/schneewittchen/rosandroid/ui/fragments/main/MainFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.schneewittchen.rosandroid.ui.fragments.main;\n\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.LayoutInflater;\nimport android.view.MenuItem;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.LinearLayout;\nimport android.widget.PopupWindow;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.ActionBarDrawerToggle;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.widget.Toolbar;\nimport androidx.core.view.GravityCompat;\nimport androidx.drawerlayout.widget.DrawerLayout;\nimport androidx.fragment.app.Fragment;\nimport androidx.lifecycle.ViewModelProvider;\nimport androidx.navigation.NavController;\nimport androidx.navigation.Navigation;\n\nimport com.google.android.material.tabs.TabLayout;\nimport com.schneewittchen.rosandroid.R;\nimport com.schneewittchen.rosandroid.databinding.UpdatePopupWindowBinding;\nimport com.schneewittchen.rosandroid.viewmodel.MainViewModel;\n\nimport static android.content.Context.LAYOUT_INFLATER_SERVICE;\nimport static androidx.core.content.ContextCompat.getSystemService;\n\n\n/**\n * TODO: Description\n *\n * @author Nico Studt\n * @version 1.0.1\n * @created on 10.01.2020\n * @updated on 27.07.2020\n * @modified by Nils Rottmann\n * @updated on 05.11.2020\n * @modified by Nico Studt\n */\npublic class MainFragment extends Fragment implements OnBackPressedListener {\n\n    public static final String TAG = MainFragment.class.getSimpleName();\n\n    TabLayout tabLayout;\n    NavController navController;\n    DrawerLayout drawerLayout;\n    Toolbar toolbar;\n    MainViewModel mViewModel;\n\n\n    public static MainFragment newInstance() {\n        return new MainFragment();\n    }\n\n\n    @Override\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n        tabLayout = view.findViewById(R.id.tabs);\n        toolbar = view.findViewById(R.id.toolbar);\n        drawerLayout = view.findViewById(R.id.drawer_layout);\n\n        navController = Navigation.findNavController(requireActivity(), R.id.fragment_container);\n\n        drawerLayout.setScrimColor(getResources().getColor(R.color.drawerFadeColor));\n\n        // Connect toolbar to application\n        if (getActivity() instanceof AppCompatActivity) {\n\n            AppCompatActivity activity = (AppCompatActivity) getActivity();\n            activity.setSupportActionBar(toolbar);\n\n            // Setup home indicator to open drawer layout\n            ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(activity, drawerLayout, toolbar,\n                    R.string.navigation_drawer_open, R.string.navigation_drawer_close);\n\n            drawerLayout.addDrawerListener(toggle);\n            toggle.syncState();\n        }\n\n        // Select Master tab as home\n        tabLayout.selectTab(tabLayout.getTabAt(0));\n        navController.navigate(R.id.action_to_masterFragment);\n\n        // Setup tabs for navigation\n        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\n            @Override\n            public void onTabSelected(TabLayout.Tab tab) {\n                Log.i(TAG, \"On Tab selected: \" + tab.getText());\n\n                switch (tab.getText().toString()) {\n                    case \"Master\":\n                        navController.navigate(R.id.action_to_masterFragment);\n                        break;\n                    case \"Details\":\n                        navController.navigate(R.id.action_to_detailFragment);\n                        break;\n                    case \"SSH\":\n                        navController.navigate(R.id.action_to_sshFragment);\n                        break;\n                    default:\n                        navController.navigate(R.id.action_to_vizFragment);\n                }\n            }\n\n            @Override\n            public void onTabUnselected(TabLayout.Tab tab) {\n            }\n\n            @Override\n            public void onTabReselected(TabLayout.Tab tab) {\n            }\n        });\n    }\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        mViewModel = new ViewModelProvider(this).get(MainViewModel.class);\n\n        if (this.getArguments() != null) {\n            mViewModel.createFirstConfig(this.getArguments().getString(\"configName\"));\n        }\n\n        mViewModel.getConfigTitle().observe(getViewLifecycleOwner(), this::setTitle);\n    }\n\n    private void setTitle(String newTitle) {\n        if (newTitle.equals(toolbar.getTitle().toString())) {\n            return;\n        }\n\n        toolbar.setTitle(newTitle);\n    }\n\n    public boolean onBackPressed() {\n        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {\n            drawerLayout.closeDrawer(GravityCompat.START);\n            return true;\n        }\n\n        return navController.popBackStack();\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n        int itemId = item.getItemId();\n\n        if (itemId == android.R.id.home) {\n            drawerLayout.openDrawer(GravityCompat.START);\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,\n                             @Nullable Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_main, container, false);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/schneewittchen/rosandroid/ui/fragments/main/MainFragment.java	(revision 6b2ab8448af4edef41225c126cfbe384cff33e35)
+++ app/src/main/java/com/schneewittchen/rosandroid/ui/fragments/main/MainFragment.java	(date 1628210059004)
@@ -117,11 +117,6 @@
             public void onTabReselected(TabLayout.Tab tab) {
             }
         });
-    }
-
-    @Override
-    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
 
         mViewModel = new ViewModelProvider(this).get(MainViewModel.class);
 
Index: app/src/main/java/com/schneewittchen/rosandroid/ui/fragments/master/MasterFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.schneewittchen.rosandroid.ui.fragments.master;\n\nimport android.os.Bundle;\nimport android.text.Editable;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.inputmethod.EditorInfo;\nimport android.widget.ArrayAdapter;\nimport android.widget.AutoCompleteTextView;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.lifecycle.ViewModelProvider;\n\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\nimport com.google.android.material.textfield.TextInputLayout;\nimport com.schneewittchen.rosandroid.R;\nimport com.schneewittchen.rosandroid.databinding.FragmentMasterBinding;\nimport com.schneewittchen.rosandroid.model.repositories.rosRepo.connection.ConnectionType;\nimport com.schneewittchen.rosandroid.utility.Utils;\nimport com.schneewittchen.rosandroid.viewmodel.MasterViewModel;\n\nimport java.util.ArrayList;\n\n\n/**\n * TODO: Description\n *\n * @author Nico Studt\n * @version 1.3.0\n * @created on 10.01.2020\n * @updated on 05.10.2020\n * @modified by Nico Studt\n * @updated on 16.11.2020\n * @modified by Nils Rottmann\n * @updated on 13.05.2021\n * @modified by Nico Studt\n */\npublic class MasterFragment extends Fragment implements TextView.OnEditorActionListener {\n\n    private static final String TAG = MasterFragment.class.getSimpleName();\n    private static final long MIN_HELP_TIMESPAM = 10 * 1000;\n\n    private MasterViewModel mViewModel;\n    private FragmentMasterBinding binding;\n\n    private ArrayList<String> ipItemList;\n    protected AutoCompleteTextView ipAddressField;\n    protected TextInputLayout ipAddressLayout;\n    private ArrayAdapter<String> ipArrayAdapter;\n\n    public static MasterFragment newInstance() {\n        Log.i(TAG, \"New Master Fragment\");\n        return new MasterFragment();\n    }\n\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,\n                             @Nullable Bundle savedInstanceState) {\n        binding = FragmentMasterBinding.inflate(inflater, container, false);\n\n        return binding.getRoot();\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        updateMasterDetails();\n        binding = null;\n    }\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n\n        mViewModel = new ViewModelProvider(requireActivity()).get(MasterViewModel.class);\n\n        // Define Views --------------------------------------------------------------\n        ipAddressField = getView().findViewById(R.id.ipAddessTextView);\n        ipAddressLayout = getView().findViewById(R.id.ipAddessLayout);\n\n        ipItemList = new ArrayList<>();\n        ipArrayAdapter = new ArrayAdapter<>(this.getContext(),\n                R.layout.dropdown_menu_popup_item, ipItemList);\n        ipAddressField.setAdapter(ipArrayAdapter);\n\n        String firstDeviceIp = mViewModel.getIPAddress();\n        if (firstDeviceIp != null) {\n            ipAddressField.setText(firstDeviceIp, false);\n        }\n\n        ipAddressField.setOnClickListener(clickedView -> {\n            updateIpSpinner();\n            ipAddressField.showDropDown();\n        });\n\n        ipAddressLayout.setEndIconOnClickListener(v -> {\n            ipAddressField.requestFocus();\n            ipAddressField.callOnClick();\n        });\n\n        ipAddressField.setOnItemClickListener((parent, view, position, id) -> {\n            ipAddressField.clearFocus();\n        });\n\n        // View model connection -------------------------------------------------------------------\n\n        mViewModel.getMaster().observe(getViewLifecycleOwner(), master -> {\n            if (master == null) {\n                binding.masterIpEditText.getText().clear();\n                binding.masterPortEditText.getText().clear();\n                return;\n            }\n\n            binding.masterIpEditText.setText(master.ip);\n            binding.masterPortEditText.setText(String.valueOf(master.port));\n        });\n\n        mViewModel.getCurrentNetworkSSID().observe(getViewLifecycleOwner(),\n                networkSSID -> binding.NetworkSSIDText.setText(networkSSID));\n\n        mViewModel.getRosConnection().observe(getViewLifecycleOwner(), this::setRosConnection);\n\n        // User input ------------------------------------------------------------------------------\n\n        binding.connectButton.setOnClickListener(v -> {\n                updateMasterDetails();\n                mViewModel.setMasterDeviceIp(ipAddressField.getText().toString());\n                mViewModel.connectToMaster();\n        });\n        binding.disconnectButton.setOnClickListener(v -> mViewModel.disconnectFromMaster());\n        binding.helpButton.setOnClickListener(v -> showConnectionHelpDialog());\n        binding.masterIpEditText.setOnEditorActionListener(this);\n        binding.masterPortEditText.setOnEditorActionListener(this);\n    }\n\n    private void updateIpSpinner() {\n        ipItemList = new ArrayList<>();\n        ipItemList = mViewModel.getIPAddressList();\n        ipArrayAdapter.clear();\n        ipArrayAdapter.addAll(ipItemList);\n    }\n\n    private void showConnectionHelpDialog() {\n        mViewModel.updateHelpDisplay();\n        String[] items = getResources().getStringArray(R.array.connection_checklist);\n\n        new MaterialAlertDialogBuilder(this.requireContext())\n                .setTitle(R.string.connection_checklist_title)\n                .setItems(items, null)\n                .show();\n    }\n\n    private void setRosConnection(ConnectionType connectionType) {\n        int connectVisibility = View.INVISIBLE;\n        int disconnectVisibility = View.INVISIBLE;\n        int pendingVisibility = View.INVISIBLE;\n        String statustext = getContext().getString(R.string.connected);\n\n        if (connectionType == ConnectionType.DISCONNECTED\n                || connectionType == ConnectionType.FAILED) {\n            connectVisibility = View.VISIBLE;\n            statustext = getContext().getString(R.string.disconnected);\n\n        } else if (connectionType == ConnectionType.CONNECTED) {\n            disconnectVisibility = View.VISIBLE;\n\n        } else if (connectionType == ConnectionType.PENDING) {\n            pendingVisibility = View.VISIBLE;\n            statustext = getContext().getString(R.string.pending);\n        }\n\n        // Display connection help dialog if the connection failed and enough time has passed\n        // since the last display.\n        if (connectionType == ConnectionType.FAILED && mViewModel.shouldShowHelp()) {\n            showConnectionHelpDialog();\n        }\n\n        binding.statusText.setText(statustext);\n        binding.connectedImage.setVisibility(disconnectVisibility);\n        binding.disconnectedImage.setVisibility(connectVisibility);\n        binding.connectButton.setVisibility(connectVisibility);\n        binding.disconnectButton.setVisibility(disconnectVisibility);\n        binding.pendingBar.setVisibility(pendingVisibility);\n    }\n\n    private void updateMasterDetails() {\n        // Update master IP\n        Editable masterIp = binding.masterIpEditText.getText();\n\n        if (masterIp != null) {\n            mViewModel.setMasterIp(masterIp.toString());\n        }\n\n        // Update master port\n        Editable masterPort = binding.masterPortEditText.getText();\n\n        if (masterPort != null && masterPort.length() > 0) {\n            mViewModel.setMasterPort(masterPort.toString());\n        }\n    }\n\n    @Override\n    public boolean onEditorAction(TextView view, int actionId, KeyEvent event) {\n        switch (actionId) {\n            case EditorInfo.IME_ACTION_DONE:\n            case EditorInfo.IME_ACTION_NEXT:\n            case EditorInfo.IME_ACTION_PREVIOUS:\n                updateMasterDetails();\n\n                view.clearFocus();\n                Utils.hideSoftKeyboard(view);\n\n                return true;\n        }\n\n        return false;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/schneewittchen/rosandroid/ui/fragments/master/MasterFragment.java	(revision 6b2ab8448af4edef41225c126cfbe384cff33e35)
+++ app/src/main/java/com/schneewittchen/rosandroid/ui/fragments/master/MasterFragment.java	(date 1628210059016)
@@ -28,26 +28,13 @@
 import java.util.ArrayList;
 
 
-/**
- * TODO: Description
- *
- * @author Nico Studt
- * @version 1.3.0
- * @created on 10.01.2020
- * @updated on 05.10.2020
- * @modified by Nico Studt
- * @updated on 16.11.2020
- * @modified by Nils Rottmann
- * @updated on 13.05.2021
- * @modified by Nico Studt
- */
 public class MasterFragment extends Fragment implements TextView.OnEditorActionListener {
 
     private static final String TAG = MasterFragment.class.getSimpleName();
     private static final long MIN_HELP_TIMESPAM = 10 * 1000;
 
     private MasterViewModel mViewModel;
-    private FragmentMasterBinding binding;
+    private FragmentMasterBinding masterBinding;
 
     private ArrayList<String> ipItemList;
     protected AutoCompleteTextView ipAddressField;
@@ -59,32 +46,23 @@
         return new MasterFragment();
     }
 
-
-    @Nullable
     @Override
     public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
                              @Nullable Bundle savedInstanceState) {
-        binding = FragmentMasterBinding.inflate(inflater, container, false);
-
-        return binding.getRoot();
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        updateMasterDetails();
-        binding = null;
+        masterBinding = FragmentMasterBinding.inflate(inflater, container, false);
+        View mView = masterBinding.getRoot();
+        return mView;
     }
 
     @Override
-    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
+    public void onViewCreated(@NonNull View mView, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(mView, savedInstanceState);
 
         mViewModel = new ViewModelProvider(requireActivity()).get(MasterViewModel.class);
 
         // Define Views --------------------------------------------------------------
-        ipAddressField = getView().findViewById(R.id.ipAddessTextView);
-        ipAddressLayout = getView().findViewById(R.id.ipAddessLayout);
+        ipAddressField = masterBinding.ipAddessTextView;
+        ipAddressLayout = masterBinding.ipAddessLayout;
 
         ipItemList = new ArrayList<>();
         ipArrayAdapter = new ArrayAdapter<>(this.getContext(),
@@ -114,31 +92,39 @@
 
         mViewModel.getMaster().observe(getViewLifecycleOwner(), master -> {
             if (master == null) {
-                binding.masterIpEditText.getText().clear();
-                binding.masterPortEditText.getText().clear();
+                masterBinding.masterIpEditText.getText().clear();
+                masterBinding.masterPortEditText.getText().clear();
                 return;
             }
 
-            binding.masterIpEditText.setText(master.ip);
-            binding.masterPortEditText.setText(String.valueOf(master.port));
+            masterBinding.masterIpEditText.setText(master.ip);
+            masterBinding.masterPortEditText.setText(String.valueOf(master.port));
         });
 
         mViewModel.getCurrentNetworkSSID().observe(getViewLifecycleOwner(),
-                networkSSID -> binding.NetworkSSIDText.setText(networkSSID));
+                networkSSID -> masterBinding.NetworkSSIDText.setText(networkSSID));
 
         mViewModel.getRosConnection().observe(getViewLifecycleOwner(), this::setRosConnection);
 
         // User input ------------------------------------------------------------------------------
 
-        binding.connectButton.setOnClickListener(v -> {
-                updateMasterDetails();
+        masterBinding.connectButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                MasterFragment.this.updateMasterDetails();
                 mViewModel.setMasterDeviceIp(ipAddressField.getText().toString());
                 mViewModel.connectToMaster();
+            }
         });
-        binding.disconnectButton.setOnClickListener(v -> mViewModel.disconnectFromMaster());
-        binding.helpButton.setOnClickListener(v -> showConnectionHelpDialog());
-        binding.masterIpEditText.setOnEditorActionListener(this);
-        binding.masterPortEditText.setOnEditorActionListener(this);
+        masterBinding.disconnectButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                mViewModel.disconnectFromMaster();
+            }
+        });
+        masterBinding.helpButton.setOnClickListener(v -> showConnectionHelpDialog());
+        masterBinding.masterIpEditText.setOnEditorActionListener(this);
+        masterBinding.masterPortEditText.setOnEditorActionListener(this);
     }
 
     private void updateIpSpinner() {
@@ -183,24 +169,24 @@
             showConnectionHelpDialog();
         }
 
-        binding.statusText.setText(statustext);
-        binding.connectedImage.setVisibility(disconnectVisibility);
-        binding.disconnectedImage.setVisibility(connectVisibility);
-        binding.connectButton.setVisibility(connectVisibility);
-        binding.disconnectButton.setVisibility(disconnectVisibility);
-        binding.pendingBar.setVisibility(pendingVisibility);
+        masterBinding.statusText.setText(statustext);
+        masterBinding.connectedImage.setVisibility(disconnectVisibility);
+        masterBinding.disconnectedImage.setVisibility(connectVisibility);
+        masterBinding.connectButton.setVisibility(connectVisibility);
+        masterBinding.disconnectButton.setVisibility(disconnectVisibility);
+        masterBinding.pendingBar.setVisibility(pendingVisibility);
     }
 
     private void updateMasterDetails() {
         // Update master IP
-        Editable masterIp = binding.masterIpEditText.getText();
+        Editable masterIp = masterBinding.masterIpEditText.getText();
 
         if (masterIp != null) {
             mViewModel.setMasterIp(masterIp.toString());
         }
 
         // Update master port
-        Editable masterPort = binding.masterPortEditText.getText();
+        Editable masterPort = masterBinding.masterPortEditText.getText();
 
         if (masterPort != null && masterPort.length() > 0) {
             mViewModel.setMasterPort(masterPort.toString());
@@ -223,4 +209,11 @@
 
         return false;
     }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        updateMasterDetails();
+        masterBinding = null;
+    }
 }
